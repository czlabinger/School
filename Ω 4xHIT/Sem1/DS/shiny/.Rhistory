data$type <- factor(data$type)
mylogit <- glm(type ~ npreg + glu + bp + skin + bmi + ped + age, data = data, family = "binomial")
library(aod)
library(ggplot2)
data("Pima.tr")
data <- Pima.tr
data$type <- factor(data$type)
mylogit <- glm(type ~ npreg + glu + bp + skin + bmi + ped + age, data = data, family = "binomial")
summary(mylogit)
gglot(mylogit)
library(aod)
library(ggplot2)
data("Pima.tr")
data <- Pima.tr
data$type <- factor(data$type)
mylogit <- glm(type ~ npreg + glu + bp + skin + bmi + ped + age, data = data, family = "binomial")
summary(mylogit)
gglot(mylogit)
library(aod)
library(ggplot2)
data("Pima.tr")
data <- Pima.tr
data$type <- factor(data$type)
mylogit <- glm(type ~ npreg + glu + bp + skin + bmi + ped + age, data = data, family = "binomial")
summary(mylogit)
plot(mylogit)
library(MASS)
data(Pima.tr)
model <- glm(type ~ skin + glu  + bmi + ped + bp + age + npreg, family=binomial(link ="logit"), data=Pima.tr)
# Create a matrix of scatterplots
pairs(Pima.tr[, c("npreg" ,  "glu"  , "bmi" , "ped" , "bp" , "skin" , "age")],
lower.panel = panel.smooth,
upper.panel = panel.cor,
diag.panel = panel.hist,
las=1)
summary(model)
coef(model)
model <- glm(type ~ skin + glu   + ped + bp  + npreg, family=binomial(link ="logit"), data=Pima.tr)
# Create a matrix of scatterplots
pairs(Pima.tr[, c("npreg" ,  "glu"  , "bmi" , "ped" , "bp"  )],
lower.panel = panel.smooth,
upper.panel = panel.cor,
diag.panel = panel.hist,
las=1)
summary(model)
coef(model)
model <- glm(type ~ glu  + bmi + ped + bp + age , family=binomial(link ="logit"), data=Pima.tr)
# Create a matrix of scatterplots
pairs(Pima.tr[, c("glu"  , "bmi" , "ped" , "bp"  , "age")],
lower.panel = panel.smooth,
upper.panel = panel.cor,
diag.panel = panel.hist,
las=1)
summary(model)
coef(model)
library(MASS)
data("Pima.tr")
# Logistisches Regressionsmodell erstellen
logistic_model <- glm(type ~ age + npreg + bmi + glu + bp + ped + skin,
data = Pima.tr,
family = "binomial")
# Modellzusammenfassung anzeigen
summary(logistic_model)
library(MASS)
library(car)
# Partial Regression Plots erstellen
crPlots(logistic_model)
data("Pima.tr")
# Logistisches Regressionsmodell erstellen
logistic_model <- glm(type ~ age + npreg + bmi + glu + bp + ped + skin,
data = Pima.tr,
family = "binomial")
# Modellzusammenfassung anzeigen
summary(logistic_model)
library(MASS)
library(car)
library(car)
# Partial Regression Plots erstellen
crPlots(logistic_model)
data("Pima.tr")
# Logistisches Regressionsmodell erstellen
logistic_model <- glm(type ~ age + npreg + bmi + glu + bp + ped + skin,
data = Pima.tr,
family = "binomial")
# Modellzusammenfassung anzeigen
summary(logistic_model)
# Partial Regression Plots erstellen
crPlots(logistic_model)
library(MASS)
library(car)
library(car)
library(pROC)
# Logistisches Regressionsmodell erstellen
logistic_model <- glm(type ~ age + npreg + bmi + glu + bp + ped + skin,
data = Pima.tr,
family = "binomial")
# Modellzusammenfassung anzeigen
summary(logistic_model)
# Partial Regression Plots erstellen
crPlots(logistic_model)
# ROC-Kurve erstellen
roc_curve <- roc(Pima.tr$type, predict(logistic_model, type = "response"))
plot(roc_curve, main = "ROC Curve", col = "blue", lwd = 2)
library(MASS)
library(car)
library(car)
library(pROC)
# Logistisches Regressionsmodell erstellen
logistic_model <- glm(type ~ age + npreg + bmi + glu + bp + ped + skin,
data = Pima.tr,
family = "binomial")
# Modellzusammenfassung anzeigen
summary(logistic_model)
# Partial Regression Plots erstellen
crPlots(logistic_model)
# ROC-Kurve erstellen
roc_curve <- roc(Pima.tr$type, predict(logistic_model, type = "response"))
plot(roc_curve, main = "ROC Curve", col = "blue", lwd = 2)
confint(logistic_model)
plot(resid(logistic_model) ~ fitted(logistic_model),
main = "Residual Plot",
xlab = "Fitted Values",
ylab = "Residuals")
abline(h = 0, col = "red", lty = 2)
library(MASS)
data(Pima.tr)
model <- glm(diabetes ~ ., data = Pima.tr, family = binomial)
library(MASS)
data(Pima.tr)
model <- glm(Pima.tr$type ~ ., data = Pima.tr, family = binomial)
# Zusammenfassung des Modells anzeigen
summary(model)
library(MASS)
data(Pima.tr)
model <- glm(Pima.tr$type ~ ., data = Pima.tr, family = binomial)
# Zusammenfassung des Modells anzeigen
summary(model)
# Residuen des Modells erhalten
residuals <- residuals(model, type = "response")
# QQ-Plot erstellen
qqplot(residuals, main = "QQ-Plot for Logistic Regression Residuals", col = "blue", pch = 20)
library(MASS)
data(Pima.tr)
model <- glm(Pima.tr$type ~ ., data = Pima.tr, family = binomial)
# Zusammenfassung des Modells anzeigen
summary(model)
# Residuen des Modells erhalten
residuals <- residuals(model, type = "response")
# QQ-Plot erstellen
qqnorm(residuals, main = "QQ-Plot for Logistic Regression Residuals", col = "blue", pch = 20)
qqline(residuals, col = "red")  # Füge eine Linie für die Normalverteilung hinzu
library(MASS)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
predicted_data <- data.frame(Pima.tr$npreg=seq(min(Pima.tr$npreg), max(Pima.tr$npreg), len=5000))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
gglot(data, aes(x=Pima.tr$npregm y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
gglot(data, aes(x=Pima.tr$npregm, y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=Pima.tr$npregm, y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=Pima.tr$npreg, y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=Pima.tr$glu, y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=Pima.tr$bp, y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=Pima.tr$skin, y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=c(Pima.tr$npreg, Pima.tr$glu, Pima.tr$bp, Pima.tr$skin, Pima.tr$bmi, Pima.tr$ped, Pima.tr$age), y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=c(Pima.tr$npreg, Pima.tr$glu, Pima.tr$bp, Pima.tr$skin, Pima.tr$bmi, Pima.tr$ped, Pima.tr$age), y=Pima.tr$type))  + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=c(Pima.tr$npreg, Pima.tr$glu, Pima.tr$bp, Pima.tr$skin, Pima.tr$bmi, Pima.tr$ped, Pima.tr$age), y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(Pima.tr, aes(x = npreg, y = type, color = glu, shape = bp)) +
geom_point() +
stat_smooth(method = "glm", method.args = list(family = binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=c(Pima.tr$npreg, Pima.tr$glu, Pima.tr$bp, Pima.tr$skin, Pima.tr$bmi, Pima.tr$ped, Pima.tr$age), y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data, aes(x=Pima.tr$skin, y=Pima.tr$type)) + geom_point() + stat_smooth(method = "glm", color="green", se=FALSE, method.args = list(family=binomial))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data = Pima.tr, aes(x = skin, y = type)) +
geom_point() +
stat_smooth(method = "glm", color = "green", se = FALSE, method.args = list(family = "binomial"))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(model = Pima.tr, aes(x = skin, y = type)) +
geom_point() +
stat_smooth(method = "glm", color = "green", se = FALSE, method.args = list(family = "binomial"))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
ggplot(data = Pima.tr, aes(x = skin, y = type)) +
geom_point() +
stat_smooth(method = "glm", color = "green", se = FALSE, method.args = list(family = "binomial"))
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
summary(model)
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
coef <- coef(model)
model_equation <- paste("Y = ",round(coef[1],2), " + ",
round(coef[2],4)," * skin + ",
round(coef[3],2)," * glu + ",
round(coef[4],2)," * bmi + ",
round(coef[5],2)," * ped + ",
round(coef[6],4)," * bp + ",
round(coef[7],2)," * age + ",
round(coef[8],2)," * npreg")
print(model_equation)
summary(model)
library(MASS)
library(ggplot2)
data(Pima.tr)
model <- glm(Pima.tr$type ~ Pima.tr$npreg + Pima.tr$glu + Pima.tr$bp + Pima.tr$skin + Pima.tr$bmi + Pima.tr$ped + Pima.tr$age, data = Pima.tr, family = binomial)
coef <- coef(model)
model_equation <- paste("Y = ",round(coef[1],2), " + ",
round(coef[2],4)," * skin + ",
round(coef[3],2)," * glu + ",
round(coef[4],2)," * bmi + ",
round(coef[5],2)," * ped + ",
round(coef[6],4)," * bp + ",
round(coef[7],2)," * age + ",
round(coef[8],2)," * npreg")
summary(model)
print(model_equation)
model <-  lm(state.x77[,"Murder"] ~ state.x77[,"Population"] + state.x77[,"Income"] + state.x77[,"Illiteracy"] + state.x77[,"Life Exp"])
# Korrelation
summary(model)
# Systematische Fehler
plot(model, which = 1)
# homoskedastitzitaet
plot(model, which = 3)
# Modellfehler normalverteilt
plot(model, which = 2)
# multikollinearitaet
p <- state.x77[,c("Population","Income", "Illiteracy", "Life Exp")]
print(cor(p))
panel.hist <- function(x, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
# Create a matrix of scatterplots
pairs(state.x77[, c("Life Exp" , "Population" , "Illiteracy", "Income")],
lower.panel = panel.smooth,
upper.panel = panel.cor,
diag.panel = panel.hist,
las=1)
model <-  lm(state.x77[,"Murder"] ~ state.x77[,"Population"] + state.x77[,"Income"] + state.x77[,"Illiteracy"] + state.x77[,"Life Exp"])
# Korrelation
summary(model)
# Systematische Fehler
plot(model, which = 1)
# homoskedastitzitaet
plot(model, which = 3)
# Modellfehler normalverteilt
plot(model, which = 2)
# multikollinearitaet
p <- state.x77[,c("Population","Income", "Illiteracy", "Life Exp", "Murder")]
print(cor(p))
panel.hist <- function(x, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
# Create a matrix of scatterplots
pairs(state.x77[, c("Life Exp" , "Population" , "Illiteracy", "Income", "Murder")],
lower.panel = panel.smooth,
upper.panel = panel.cor,
diag.panel = panel.hist,
las=1)
model <-  lm(state.x77[,"Murder"] ~ state.x77[,"Population"] + state.x77[,"Income"] + state.x77[,"Illiteracy"] + state.x77[,"Life Exp"])
# Korrelation
summary(model)
# Systematische Fehler
plot(model, which = 1)
# homoskedastitzitaet
plot(model, which = 3)
# Modellfehler normalverteilt
plot(model, which = 2)
# multikollinearitaet
p <- state.x77[,c("Population", "Illiteracy")]
print(cor(p))
panel.hist <- function(x, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
# Create a matrix of scatterplots
pairs(state.x77[, c("Life Exp", "Illiteracy")],
lower.panel = panel.smooth,
upper.panel = panel.cor,
diag.panel = panel.hist,
las=1)
model <-  lm(state.x77[,"Murder"] ~ state.x77[,"Population"] + state.x77[,"Income"] + state.x77[,"Illiteracy"] + state.x77[,"Life Exp"])
# Korrelation
summary(model)
# Systematische Fehler
plot(model, which = 1)
# homoskedastitzitaet
plot(model, which = 3)
# Modellfehler normalverteilt
plot(model, which = 2)
# multikollinearitaet
p <- state.x77[,c("Population", "Illiteracy", "Income")]
print(cor(p))
panel.hist <- function(x, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
# Create a matrix of scatterplots
pairs(state.x77[, c("Life Exp", "Illiteracy", "Income")],
lower.panel = panel.smooth,
upper.panel = panel.cor,
diag.panel = panel.hist,
las=1)
model <-  lm(state.x77[,"Murder"] ~ state.x77[,"Population"] + state.x77[,"Income"] + state.x77[,"Illiteracy"] + state.x77[,"Life Exp"])
# Korrelation
summary(model)
# Systematische Fehler
plot(model, which = 1)
# homoskedastitzitaet
plot(model, which = 3)
# Modellfehler normalverteilt
plot(model, which = 2)
# multikollinearitaet
p <- state.x77[,c("Population", "Illiteracy", "Income")]
print(cor(p))
panel.hist <- function(x, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
# Create a matrix of scatterplots
pairs(state.x77[, c("Population", "Illiteracy", "Income")],
lower.panel = panel.smooth,
upper.panel = panel.cor,
diag.panel = panel.hist,
las=1)
model <-  lm(state.x77[,"Murder"] ~ state.x77[,"Population"] + state.x77[,"Income"] + state.x77[,"Illiteracy"] + state.x77[,"Life Exp"])
# Korrelation
summary(model)
# Systematische Fehler
plot(model, which = 1)
# homoskedastitzitaet
plot(model, which = 3)
# Modellfehler normalverteilt
plot(model, which = 2)
# multikollinearitaet
p <- state.x77[,c("Population", "Illiteracy")]
print(cor(p))
panel.hist <- function(x, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...) {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
# Create a matrix of scatterplots
pairs(state.x77[, c("Population", "Illiteracy")],
lower.panel = panel.smooth,
upper.panel = panel.cor,
diag.panel = panel.hist,
las=1)
knitr::opts_chunk$set(echo = TRUE)
# Faktoren in numerische Werte umwandeln
numerische_werte <- as.numeric(faktoren)
# Beispiel-Vektor
vektor <- c(1, 2, 3, 4, 5)
# Vektor in Faktoren umwandeln
faktoren <- as.factor(vektor)
# Ergebnis anzeigen
print(faktoren)
# Beispiel-Vektor
vektor <- c(1, 2, 3, 4, 5)
# Vektor in Faktoren umwandeln
faktoren <- as.factor(vektor)
# Ergebnis anzeigen
print(faktoren)
# Faktoren wieder in Vektor umwandeln
vektor_zurueck <- as.character(faktoren)
# Ergebnis anzeigen
print(vektor_zurueck)
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
glmnet(state.x77[,"Murder"], state.x77[,"Population"] + state.x77[,"Illiteracy"],family="gaussian", alpha = 0)
shiny::runApp('Documents/School/4xHIT/DS/shiny')
runApp('Documents/School/4xHIT/DS/shiny')
